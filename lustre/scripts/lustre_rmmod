#!/bin/bash
#
# Takes a list of modules and unloads them and all dependent modules.
# If a module cannot be unloaded (e.g. it's in use), an error is
# returned.
###############################################################################

RMMOD=rmmod
if [ $(uname -r | cut -c 3) -eq 4 ]; then
	RMMOD="modprobe -r"
fi

# Unload all modules dependent on $1 (exclude removal of $1)
unload_dep_modules_exclusive() {
	local MODULE=$1
	local DEPS="$(lsmod | awk '($1 == "'$MODULE'") { print $4 }')"
	for SUBMOD in $(echo $DEPS | tr ',' ' '); do
		unload_dep_modules_inclusive $SUBMOD || return 1
	done
	return 0
}

# Unload all modules dependent on $1 (include removal of $1)
unload_dep_modules_inclusive() {
	local MODULE=$1

	# if $MODULE not loaded, return 0
	lsmod | egrep -q "^\<$MODULE\>" || return 0
	unload_dep_modules_exclusive $MODULE || return 1
	$RMMOD $MODULE || return 1
	return 0
}

modules="$@"

# To maintain backwards compatibility, ldiskfs and libcfs must be
# unloaded if no parameters are given, or if only the ldiskfs parameter
# is given. It's ugly, but is needed to emulate the prior functionality
if [ -z "$modules" ]; then
	modules="ldiskfs libcfs"
elif [ "$modules" = "ldiskfs" ]; then
	modules="ldiskfs libcfs"
fi

for mod in $modules; do
	unload_dep_modules_inclusive $mod || exit 1
done

exit 0
