SUBDIRS := @LDISKFS_SUBDIR@ @SPL_SUBDIR@ @ZFS_SUBDIR@ . @LIBSYSIO_SUBDIR@ @SNMP_SUBDIR@ @LUSTREIOKIT_SUBDIR@ @LIBCFS_SUBDIR@ lnet lustre
DIST_SUBDIRS := @LDISKFS_DIST_SUBDIR@ @SNMP_DIST_SUBDIR@ libsysio lustre-iokit @LIBCFS_SUBDIR@ lnet lustre
SOURCES_SUBDIRS := @LIBCFS_SUBDIR@ lnet lustre
MODULE_SYMVERS_DEPS = module-symvers

FAKE_TARGETS = srpm rpms debs
FAKE_TARGETS += srpm-iokit rpms-iokit
FAKE_TARGETS += srpm-ldiskfs rpms-ldiskfs
.PHONY: $(FAKE_TARGETS)

AUTOMAKE_OPTIONS = foreign

FIND_TAG_FILES_CMD = find $(top_srcdir) \
		     -path $(top_srcdir)/ldiskfs/ldiskfs/linux-stage \
		     -prune -false -o -type f -name '*.[hc]'

# these empty rules are needed so that automake doesn't add its own
# recursive rules
etags-recursive:

ctags-recursive:

tags-recursive:

TAGS: etags

tags: ctags etags

etags:
	$(RM) $(top_srcdir)/TAGS
	ETAGSF=`etags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs etags $$ETAGSF -a

ctags:
	$(RM) $(top_srcdir)/tags
	CTAGSF=`ctags --version | grep -iq exuberant && \
		echo "-I __initdata,__exitdata,EXPORT_SYMBOL"`; \
	$(FIND_TAG_FILES_CMD) | xargs ctags $$CTAGSF -a

cscope-recursive:

cscope:
	$(RM) $(top_srcdir)/cscope*.out $(top_srcdir)/cscope.files
	$(FIND_TAG_FILES_CMD) > cscope.files
	cscope -bRq

mkid:
	$(FIND_TAG_FILES_CMD) | xargs mkid


doxygen:  doxygen-api doxygen-ref

doxygen-%: build/doxyfile.%
	   doxygen $<

if MODULES
sources: all-sources

all-sources: $(MODULE_SYMVERS_DEPS)
	for dir in $(SOURCES_SUBDIRS) ; do \
		$(MAKE) sources -C $$dir || exit $$? ; \
	done

if LINUX
all-am: modules

modules: $(DEP) all-sources
	$(MAKE) CC="$(CC)" -C $(LINUX_OBJ)			     \
	-f $(PWD)/build/Makefile LUSTRE_LINUX_CONFIG=$(LINUX_CONFIG) \
        LINUXINCLUDE='$(EXTRA_LNET_INCLUDE) -I$$(srctree)/arch/$$(SRCARCH)/include -I$$(srctree)/arch/$$(SRCARCH)/include/generated -Iinclude $$(if $$(KBUILD_SRC),-Iinclude2 -I$$(srctree)/include) -include $(CONFIG_INCLUDE)' \
	$(MODULE_TARGET)=$(PWD) -o tmp_include_depends -o scripts -o \
	include/config/MARKER $@
endif # LINUX

endif # MODULES

dist-hook:
	$(RM) $(distdir)/ldiskfs/*.spec
	$(RM) $(distdir)/lustre-iokit/*.spec
	find $(distdir) -name .deps -o \
			-name CVS -o \
			-name .svn -o \
			-name .git -o \
			-name .#* | xargs rm -rf
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  module-dist-hook

EXTRA_DIST = @PACKAGE_TARNAME@.spec					\
	build/Makefile build/lbuild*					\
	build/Rules.in 							\
	build/update_oldconfig						\
	build/autoconf/lustre-build-linux.m4				\
	build/autoconf/lustre-build-darwin.m4				\
	build/autoconf/lustre-build-ldiskfs.m4				\
	build/autoconf/lustre-build.m4 build/rdac_spec                  \
	build/mptlinux.spec.patch build/patches                         \
	build/funcs.sh build/find_linux_rpms build/exit_traps.sh

srpm-iokit:
	@echo "Running \"make srpm\" in lustre-iokit"
	@$(MAKE) -C lustre-iokit $(AM_MAKEFLAGS) srpm

rpms-iokit:
	@echo "Running \"make rpms\" in lustre-iokit"
	@$(MAKE) -C lustre-iokit $(AM_MAKEFLAGS) rpms

if LDISKFS_INTREE
SRPM_LDISKFS_DEP=srpm-ldiskfs
if LDISKFS_BUILD
RPMS_LDISKFS_DEP=rpms-ldiskfs
else
RPMS_LDISKFS_DEP=
endif # LDISKFS_BUILD
else
RPMS_LDISKFS_DEP=
SRPM_LDISKFS_DEP=
endif # LDISKFS_INTREE

ldiskfs/configure:
	@echo "Running ldiskfs/autogen.sh from lustre's autoMakefile"
	cd ldiskfs && sh autogen.sh

srpm-ldiskfs: ldiskfs/configure
	@echo "Building ldiskfs source rpm from lustre's autoMakefile"
	cd ldiskfs && \
	./configure && \
	make srpm

rpms-ldiskfs: ldiskfs/configure
	@echo "Building ldiskfs rpms from lustre's autoMakefile"
	cd ldiskfs && \
	./configure --with-linux=@LINUX@ --with-linux-obj=@LINUX_OBJ@ && \
	make rpm

rpm-local:
	@(if test "${HAVE_RPMBUILD}" = "no"; then \
		echo -e "\n" \
	"*** Required util ${RPMBUILD} missing.  Please install the\n" \
	"*** package for your distribution which provides ${RPMBUILD},\n" \
	"*** re-run configure, and try again.\n"; \
		exit 1; \
	fi; \
	mkdir -p $(rpmbuilddir)/TMP && \
	mkdir -p $(rpmbuilddir)/BUILD && \
	mkdir -p $(rpmbuilddir)/RPMS && \
	mkdir -p $(rpmbuilddir)/SRPMS && \
	mkdir -p $(rpmbuilddir)/SPECS && \
	mkdir -p $(rpmbuilddir)/SOURCES)

rpms: srpm $(RPMS_LDISKFS_DEP) rpms-iokit
	rpmpkg=*.src.rpm; \
	rpmbuilddir=`mktemp -t -d $(PACKAGE)-build-$$USER-XXXXXXXX`; \
	$(MAKE) $(AM_MAKEFLAGS) \
		rpmbuilddir="$$rpmbuilddir" \
		rpm-local || exit 1; \
	rpmbuild \
		--define "_tmppath $$rpmbuilddir/TMP" \
		--define "_topdir $$rpmbuilddir" \
		$(RPMBUILD_WITH_ZFS) \
		$(RPMBUILD_WITHOUT_LDISKFS) \
		$(RPMBUILD_WITHOUT_LUSTRE_TESTS) \
		$(RPMBUILD_WITHOUT_SERVERS) \
		--define "configure_args $(ac_configure_args)" \
		--rebuild $$rpmpkg || exit 1; \
	cp $$rpmbuilddir/RPMS/*/* . || exit 1; \
	$(RM) -R $$rpmbuilddir

srpm: @PACKAGE_TARNAME@.spec dist Makefile $(SRPM_LDISKFS_DEP) srpm-iokit
	rpmbuilddir=`mktemp -t -d $(PACKAGE)-build-$$USER-XXXXXXXX`; \
	$(MAKE) $(AM_MAKEFLAGS) \
		rpmbuilddir="$$rpmbuilddir" \
		rpm-local || exit 1; \
	rpmbuild \
		--define "_tmppath $$rpmbuilddir/TMP" \
		--define "_topdir $$rpmbuilddir" \
		--define "build_src_rpm 1" \
		--define "dist %{nil}" \
	-ts $(distdir).tar.gz || exit 1; \
	cp $$rpmbuilddir/SRPMS/*.src.rpm . || exit 1; \
	$(RM) -R $$rpmbuilddir

# In the debs target, first make sure what's in the changelog reflects
# the software version.  Here's how we could dig the version out of the
# autoconf version file directly:
# lversion=$$(sed -ne 's/m4_define(\[LUSTRE_[A-Z][A-Z]*\],\[\([0-9][0-9]*\)\])$$/\1/p'
#	lustre/autoconf/lustre-version.ac | tr '\n' '.' | sed -e 's/.$//');
#
# However, one cannot really run "make debs" without having done a
# configure first, so we could use the easier method of digging the
# version out of the config.h file.
debs:
	lversion=$$(sed -ne 's/^#define VERSION "\(.*\)"$$/\1/p' config.h); \
	cversion=$$(sed -ne '1s/^lustre (\(.*\)-[0-9][0-9]*).*$$/\1/p' debian/changelog); \
	if [ "$$lversion" != "$$cversion" ]; then \
		echo -e "1i\nlustre ($$lversion-1) unstable; urgency=low\n\n  * Automated changelog entry update\n\n -- Brian J. Murrell <brian@interlinx.bc.ca>  $$(date -R)\n\n.\nwq" | ed debian/changelog; \
	fi; \
	rm -rf debs
	dpkg-buildpackage -I.git -I\*.out[0-9]\* -I\*.swp || { \
		rc=$${PIPESTATUS[0]}; \
		[ $${rc} -gt 1 ] && exit $${rc}; \
		exit 0; \
	}
	export KPKG_DEST_DIR="$$(pwd)/.." && \
	version=$$(sed -ne '1s/^lustre (\(.*\)).*$$/\1/p' debian/changelog) && \
	rm -rf debian/tmp/modules-deb && \
	mkdir debian/tmp/modules-deb && \
	pushd debian/tmp/modules-deb && \
	dpkg -x ../../../../lustre-source_$${version}_all.deb $$(pwd) && \
	mkdir usr_src/ && \
	tar -C usr_src/ -xjf usr/src/lustre.tar.bz2 && \
	chmod 755 usr_src/modules/lustre/debian/rules && \
	mkdir -p usr_share_modass && \
	ln -s /usr/share/modass/include/ usr_share_modass/ && \
	ln -s /usr/share/modass/packages/ usr_share_modass/ && \
	echo "lustre" > usr_share_modass/compliant.list && \
	export MA_DIR=$$(pwd)/usr_share_modass && \
	KVERS=$${KVERS:-$(LINUXRELEASE)}; \
	m-a build $${KVERS:+-l $$KVERS} -i -u $$(pwd) lustre && \
	popd && \
	VER=$$(sed -ne '1s/^lustre (\(.*-[0-9][0-9]*\)).*$$/\1/p' debian/changelog); \
	mkdir -p debs && \
	mv ../liblustre_$${VER}_*.deb ../linux-patch-lustre_$${VER}_all.deb ../lustre-dev_$${VER}_*.deb ../lustre-source_$${VER}_all.deb ../lustre-tests_$${VER}_*.deb ../lustre-utils_$${VER}_*.deb ../lustre_$${VER}.dsc ../lustre_$${VER}_*.changes ../lustre_$${VER%-[0-9]*}.orig.tar.gz ../lustre_$${VER}.diff.gz ../lustre-client-modules-$${KVERS}_$${VER}_*.deb debs/

EXTRA_DIST += config.h.in

if USES_DPKG
EXTRA_DIST += debian/*
endif

module-symvers-ldiskfs:
if LDISKFS_ENABLED
	@if [ -f @LDISKFS_DIR@/@SYMVERFILE@ ]; then \
		cat @LDISKFS_DIR@/@SYMVERFILE@ >>@SYMVERFILE@; \
	elif [ -f @LDISKFS_DIR@/ldiskfs/@SYMVERFILE@ ]; then \
		cat @LDISKFS_DIR@/ldiskfs/@SYMVERFILE@ >>@SYMVERFILE@; \
	else \
		echo -e "\n" \
		"*** Missing ldiskfs symbols. Ensure you have built ldiskfs:\n"\
		"*** - @LDISKFS_OBJ@/ldiskfs/@SYMVERFILE@\n"; \
		exit 1; \
	fi
endif # LDISKFS_ENABLED

module-symvers-zfs:
if ZFS_ENABLED
	@if [ -f @SPL_OBJ@/@SPL_SYMBOLS@ ]; then \
		cat @SPL_OBJ@/@SPL_SYMBOLS@ >>@SYMVERFILE@; \
	elif [ -f @SPL_OBJ@/module/@SPL_SYMBOLS@ ]; then \
		cat @SPL_OBJ@/module/@SPL_SYMBOLS@ >>@SYMVERFILE@; \
	else \
		echo -e "\n" \
		"*** Missing spl symbols. Ensure you have built spl:\n" \
		"*** - @SPL_OBJ@/@SYMVERFILE@\n"; \
		exit 1; \
	fi
	@if [ -f @ZFS_OBJ@/@ZFS_SYMBOLS@ ]; then \
		cat @ZFS_OBJ@/@ZFS_SYMBOLS@ >>@SYMVERFILE@; \
	elif [ -f @ZFS_OBJ@/module/@ZFS_SYMBOLS@ ]; then \
		cat @ZFS_OBJ@/module/@ZFS_SYMBOLS@ >>@SYMVERFILE@; \
	else \
		echo -e "\n" \
		"*** Missing zfs symbols. Ensure you have built zfs:\n" \
		"*** - @ZFS_OBJ@/@SYMVERFILE@\n"; \
		exit 1; \
	fi
endif # ZFS_ENABLED

module-symvers: module-symvers-ldiskfs module-symvers-zfs

CSTK=/tmp/checkstack
CSTKO=/tmp/checkstack.orig

checkstack:
	[ -f ${CSTK} -a ! -s ${CSTKO} ] && mv -f ${CSTK} ${CSTKO} || true
	{ for MOD in $$(find . -name "*.ko"); do			     \
		objdump -d $$MOD | perl build/checkstack.pl;                 \
	  done } | grep -v " bug " | sort -nr | uniq > ${CSTK}
	[ -f ${CSTKO} ] && ! diff -u ${CSTKO} ${CSTK} || head -30 ${CSTK}

checkstack-update:
	[ -f ${CSTK} ] && mv -f ${CSTK} ${CSTKO}

checkstack-clean:
	rm -f ${CSTK} ${CSTKO}

module-dist-hook:
	if [ -d CVS -o -d .git ]; then \
		perl lustre/scripts/make_META.pl > $(distdir)/META; \
	elif [ -f META ]; then \
		cp META $(distdir)/META; \
	else \
		echo -e "I have no idea how to create a META file in $(distdir).\nPlease file a bug at http://bugzilla.lustre.org/"; \
		exit 1; \
	fi
