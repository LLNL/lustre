Index: linux-stage/fs/ext4/super.c
===================================================================
--- linux-stage.orig/fs/ext4/super.c
+++ linux-stage/fs/ext4/super.c
@@ -82,6 +82,8 @@ static void ext4_clear_request_list(void
 
 wait_queue_head_t aio_wq[WQ_HASH_SZ];
 
+static int bigendian_extents;
+
 ext4_fsblk_t ext4_block_bitmap(struct super_block *sb,
 			       struct ext4_group_desc *bg)
 {
@@ -1180,7 +1182,7 @@ enum {
 	Opt_inode_readahead_blks, Opt_journal_ioprio,
 	Opt_discard, Opt_nodiscard,
 	Opt_init_inode_table, Opt_noinit_inode_table,
-	Opt_mballoc,
+	Opt_mballoc, Opt_bigendian_extents,
 };
 
 static const match_table_t tokens = {
@@ -1250,6 +1252,7 @@ static const match_table_t tokens = {
 	{Opt_auto_da_alloc, "auto_da_alloc=%u"},
 	{Opt_auto_da_alloc, "auto_da_alloc"},
 	{Opt_noauto_da_alloc, "noauto_da_alloc"},
+	{Opt_bigendian_extents, "bigendian_extents"},
 	{Opt_mballoc, "mballoc"},
 	{Opt_discard, "discard"},
 	{Opt_nodiscard, "nodiscard"},
@@ -1692,6 +1695,9 @@ set_qf_format:
 			else
 				set_opt(sbi->s_mount_opt,NO_AUTO_DA_ALLOC);
 			break;
+		case Opt_bigendian_extents:
+			bigendian_extents = 1;
+			break;
 		case Opt_discard:
 			set_opt(sbi->s_mount_opt, DISCARD);
 			break;
@@ -3179,6 +3185,16 @@ static int ext4_fill_super(struct super_
 		goto failed_mount;
 	}
 
+#ifdef __BIG_ENDIAN
+	if (bigendian_extents == 0) {
+		printk(KERN_ERR "EXT4-fs: extents feature is not guaranteed to "
+		       "work on big-endian systems. Use \"bigendian_extents\" "
+		       "mount option to override.\n");
+		goto failed_mount;
+	}
+#endif
+
+
 #ifdef CONFIG_PROC_FS
 	if (ext4_proc_root)
 		sbi->s_proc = proc_mkdir(sb->s_id, ext4_proc_root);
