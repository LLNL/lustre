Index: linux-2.6.18-128.1.6/fs/ext4/extents.c
===================================================================
--- linux-2.6.18-128.1.6/fs/ext4/extents.c	2011-10-07 10:17:51.000000000 +0400
+++ linux-2.6.18-128.1.6/fs/ext4/extents.c	2011-10-07 10:30:57.000000000 +0400
@@ -1855,7 +1855,7 @@
 {
 	struct ext4_ext_path *path = NULL;
 	struct ext4_ext_cache cbex;
-	struct ext4_extent *ex;
+	struct ext4_extent _ex, *ex;
 	ext4_lblk_t next, start = 0, end = 0;
 	ext4_lblk_t last = block + num;
 	int depth, exists, err = 0;
@@ -1868,21 +1868,29 @@
 		/* find extent for this block */
 		down_read(&EXT4_I(inode)->i_data_sem);
 		path = ext4_ext_find_extent(inode, block, path);
-		up_read(&EXT4_I(inode)->i_data_sem);
 		if (IS_ERR(path)) {
+			up_read(&EXT4_I(inode)->i_data_sem);
 			err = PTR_ERR(path);
 			path = NULL;
 			break;
 		}
 
+		path[0].p_generation = EXT4_I(inode)->i_ext_generation;
+
 		depth = ext_depth(inode);
 		if (unlikely(path[depth].p_hdr == NULL)) {
+			up_read(&EXT4_I(inode)->i_data_sem);
 			EXT4_ERROR_INODE(inode, "path[%d].p_hdr == NULL", depth);
 			err = -EIO;
 			break;
 		}
-		ex = path[depth].p_ext;
+		ex = NULL;
+		if (path[depth].p_ext) {
+			_ex = *path[depth].p_ext;
+			ex = &_ex;
+		}
 		next = ext4_ext_next_allocated_block(path);
+		up_read(&EXT4_I(inode)->i_data_sem);
 
 		exists = 0;
		if (!ex) {
@@ -1944,7 +1949,7 @@
 			err = -EIO;
 			break;
 		}
-		err = func(inode, path, &cbex, ex, cbdata);
+		err = func(inode, path, &cbex, NULL, cbdata);
 		ext4_ext_drop_refs(path);
 
 		if (err < 0)
Index: linux-2.6.18-128.1.6/fs/ext4/ext4_extents.h
===================================================================
--- linux-2.6.18-128.1.6/fs/ext4/ext4_extents.h	2011-10-05 14:22:46.000000000 +0400
+++ linux-2.6.18-128.1.6/fs/ext4/ext4_extents.h	2011-10-07 10:15:30.000000000 +0400
@@ -113,6 +113,7 @@
  * Truncate uses it to simulate recursive walking.
  */
 struct ext4_ext_path {
+	unsigned long			p_generation;
 	ext4_fsblk_t			p_block;
 	__u16				p_depth;
 	struct ext4_extent		*p_ext;
