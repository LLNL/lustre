# lustre.spec

# Declare rpmbuild --with/--without parameters
%bcond_with ldiskfs_intree
%bcond_without servers
%bcond_without ldiskfs
%bcond_with zfs
%bcond_without lustre_tests

%if %{without servers}
  # --without servers overrides --with {ldiskfs|zfs}
  # so undefine the internal variables set by bcond_*
  %undefine with_ldiskfs
  %undefine with_zfs
%endif

# Helper macros
%define empty_string() %(if [ -z "%{1}" ]; then echo 1; else echo 0; fi)
%define nonempty_string() %(if [ -n "%{1}" ]; then echo 1; else echo 0; fi)

# RHEL 6.x:
%if %{defined el6}
  %define klnk %{_usrsrc}/kernels/*/include/config
  %{!?kver: %global kver %((echo ""; %{__cat} %{klnk}/kernel.release 2>/dev/null) | tail -1)}
  %{!?kverpkg: %global kverpkg %(echo %{kver} | %{__sed} -e 's/.%{_target_cpu}$//g')}
  %{!?kdir: %global kdir %{_usrsrc}/kernels/%{kver}}
  %{!?kobjdir: %global kobjdir %kdir}
  %if %{undefined buildrequires}
    %if %{with servers}
      %define br_arg2 kernel-debuginfo-common-%{_target_cpu}
    %endif
    %global buildrequires kernel-devel %{?br_arg2}
  %endif
  %if %{undefined modules_requires} && %{nonempty_string %{kverpkg}}
      %global modules_requires kernel = %{kverpkg}
  %endif
%endif

# SLES:
%if %{defined suse_version}
  %if %{undefined modules_requires}
    %define flavor %(bash -c "echo %{kver} | sed -e 's/^.*-//'")
    %global modules_requires kernel-%{flavor}
  %endif
%endif

# Set the release string from three possible sources
%if %{nonempty_string @DOWNSTREAM_RELEASE@}
  %define rel_down @DOWNSTREAM_RELEASE@
%endif
%if %{nonempty_string @BUILDID@}
  %define rel_build @BUILDID@
%endif
%if %{defined kverpkg} && %{undefined build_src_rpm}
  %define rel_kver %(echo %{kverpkg} | tr '-' '_')
%endif
%if %{defined rel_down} && %{defined rel_build}
  %define us1 _
%else
  %if %{defined rel_down} && %{defined rel_kver}
    %define us1 _
  %endif
%endif
%if %{defined rel_build} && %{defined rel_kver}
  %define us2 _
%endif
%global release %{?rel_down}%{?us1}%{?rel_build}%{?us2}%{?rel_kver}

# Set the package name prefix
%if %{undefined lustre_name}
  %if %{with servers}
    %global lustre_name lustre
  %else
    %global lustre_name lustre-client
  %endif
%endif

%{!?version: %global version @VERSION@}

# The kernel version should only be appended to a binary RPM.  When
# building a source RPM it must be kernel version agnostic.  This means
# the source RPM must never specify a required kernel version, but the
# final RPM should be keyed to the kernel version it was built against.
%if %{defined build_src_rpm}
  %undefine buildrequires
  %undefine modules_requires
%endif

%if %{defined cross_path} && %{defined post_script}
%define rpm_post_base %(echo $(dirname %{cross_path})/%{lustre_name})
%endif

Summary: Lustre File System
Name: %{lustre_name}
Version: %{version}
Release: %{release}%{!?build_src_rpm:%{?dist}}
License: GPL
Group: Utilities/System
Source: lustre-%{version}.tar.gz
URL: http://wiki.whamcloud.com/
BuildRoot: %{_tmppath}/lustre-%{version}-root
Obsoletes: lustre-lite, lustre-lite-utils, lustre-ldap nfs-utils-lustre
Provides: lustre-lite = %{version}, lustre-lite-utils = %{version}
Requires: %{name}-modules = %{version}
%if %{with servers}
Requires: lustre-osd
%endif
Requires: %{lustre_name}-modules = %{version}
%if %{defined buildrequires}
BuildRequires: %{buildrequires}
%endif

%description
Userspace tools and files for the Lustre file system.

%package modules
Summary: Kernel Lustre modules for Linux %{kverpkg}
%if %{defined cross_requires}
Requires: %{cross_requires}
%endif
%if %{defined modules_requires}
Requires: %{modules_requires}
%endif
Group: Development/Kernel

%description modules
Lustre file system, server and network drivers for Linux %{kverpkg}.

%if %{with ldiskfs}
%package osd-ldiskfs
Summary: osd-ldiskfs is the mandatory glue for LDISKFS support in Lustre.
%if %{without ldiskfs_intree}
BuildRequires: lustre-ldiskfs-devel
%endif
Requires: %{lustre_name}-modules = %{version}, lustre-ldiskfs >= 4.1.0
Provides: lustre-osd
Group: Development/Kernel

%description osd-ldiskfs
The Lustre Object Storage Device (OSD) API is the interface to access and
modify data that is supposed to be stored persistently. This API is the interface
to code that bridges individual file systems. This specific package provides an
implementation of the OSD API for using the Ldiskfs filesystem as the underlying
backing store of a Lustre server.
%endif

%if %{with zfs}
%package osd-zfs
Summary: osd-zfs is the mandatory glue for ZFS support in Lustre.
BuildRequires: zfs-devel zfs-devel-kmod spl-devel-kmod
Requires: %{lustre_name}-modules = %{version}, zfs-kmod
Provides: lustre-osd
Group: Development/Kernel

%description osd-zfs
The Lustre Object Storage Device (OSD) API is the interface to access and
modify data that is supposed to be stored persistently. This API is the interface
to code that bridges individual file systems. This specific package provides an
implementation of the OSD API for using the ZFS filesystem as the underlying
backing store of a Lustre server.
%endif

%package source
Summary: Object-Based Disk storage driver source
Group: Development/Kernel

%description source
Lustre sources for further development

%package tests
Summary: Lustre testing framework
Group: Development/Kernel
Provides: %{lustre_name}-tests = %{version}
Requires: %{lustre_name} = %{version}, %{lustre_name}-modules = %{version}

%description tests
This package contains a set of test binaries and scripts that are intended
to be used by the Lustre testing framework.

%if 0%{?suse_version}
%debug_package
%endif
%prep
%setup -qn lustre-%{version}
ln lustre/ChangeLog ChangeLog-lustre
ln lnet/ChangeLog ChangeLog-lnet

%build
# if RPM_BUILD_NCPUS unset, set it
if [ -z "$RPM_BUILD_NCPUS" ] ; then
    RPM_BUILD_NCPUS=$(egrep -c "^cpu[0-9]+" /proc/stat 2>/dev/null || echo 0 :)
    if [ $RPM_BUILD_NCPUS -eq 0 ] ; then
        RPM_BUILD_NCPUS=1
    fi
    if [ $RPM_BUILD_NCPUS -gt 8 ] ; then
        RPM_BUILD_NCPUS=8
    fi
fi

rm -rf $RPM_BUILD_ROOT

# Set an explicit path to our Linux tree, if we can.
cd $RPM_BUILD_DIR/lustre-%{version}
# override %optflags so that the vendor's overzealous flags don't create
# build failures
%define optflags -g -O2 -Werror

# Here we turn lustre options that were set on the rpmbuild command line
# into configure options.
%if %{with lustre_tests}
%define conf_tests --enable-tests --enable-liblustre-tests
%else
%define conf_tests --disable-tests --disable-liblustre-tests
%endif
%if %{without servers}
  %define conf_disable_server --disable-server
%else
  %if %{with zfs}
    %define conf_zfs --with-zfs
  %else
    %define conf_zfs --without-zfs
  %endif
  %if %{with ldiskfs}
    %define conf_ldiskfs --with-ldiskfs
  %else
    %define conf_ldiskfs --without-ldiskfs
  %endif
%endif

%configure \
        %{?configure_args} \
        --with-release=%{release} %{?conf_tests} %{?conf_disable_server}  \
	%{?conf_zfs} %{?conf_ldiskfs} \
	%{?kdir: --with-linux=%kdir} %{?kobjdir: --with-linux-obj=%kobjdir} \
        %{?configure_args_override}
make -j $RPM_BUILD_NCPUS -s %{?make_args}

%install
make install DESTDIR=$RPM_BUILD_ROOT
# hack to avoid changing the libsysio code for "make install"
rm -f $RPM_BUILD_ROOT%{_libdir}/libsysio.a
# Remove ldiskfs build products - they are packaged by the ldiskfs .spec.
rm -rf $RPM_BUILD_ROOT%{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre-ldiskfs
rm -rf $RPM_BUILD_ROOT%{?rootdir}/usr/src/lustre-ldiskfs-*

# hack to include the llog_test module in lustre-tests
llog_base=$RPM_BUILD_DIR/lustre-%{version}/lustre/obdclass/llog_test
if [ -e ${llog_base}.ko ]; then
  cp ${llog_base}.ko $RPM_BUILD_ROOT%{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre
elif [ -e ${llog_base}.o ]; then
  cp ${llog_base}.o $RPM_BUILD_ROOT%{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre
fi

# The .ha_v2 extension identifies the heartbeat resource agent as using
# legacy syntax. Install a compatibility symlink to avoid conflicts when
# newer-style agents are added.
ln -s Lustre.ha_v2 $RPM_BUILD_ROOT%{_sysconfdir}/ha.d/resource.d/Lustre

# Create the pristine source directory.
cd $RPM_BUILD_DIR/lustre-%{version}
mkdir -p $RPM_BUILD_ROOT%{_prefix}/src
rm -f lustre-source
ln -s $RPM_BUILD_ROOT%{_prefix}/src lustre-source
make distdir distdir=lustre-source/lustre-%{version}
chmod -R go-w lustre-source/lustre-%{version}
# fc18 needs 'x' permission for library files
find $RPM_BUILD_ROOT -name '*.so' | xargs chmod +x

cat >lustre.files <<EOF
%attr(-, root, root) %{?rootdir}/sbin/mount.lustre
%attr(-, root, root) %{_sbindir}/*
%attr(-, root, root) %{_bindir}/*
%attr(-, root, root) %{_libdir}/libptlctl.a
%attr(-, root, root) %{_libdir}/liblustreapi.a
%attr(-, root, root) %{_libdir}/liblustreapi.so
%attr(-, root, root) %{_mandir}/man?/*
%attr(-, root, root) %{_datadir}/lustre
%attr(-, root, root) %{_includedir}/lustre
%attr(-, root, root) %{_includedir}/libcfs
%attr(-, root, root) %{_libexecdir}/lustre/lc_common
%attr(-, root, root) %{_sysconfdir}/udev/rules.d/99-lustre.rules
%attr(-, root, root) %{_sysconfdir}/init.d/lnet
%attr(-, root, root) %{_sysconfdir}/init.d/lustre
%attr(-, root, root) %config(noreplace) %{_sysconfdir}/ldev.conf
%attr(-, root, root) %{_sysconfdir}/sysconfig/lustre
%attr(-, root, root) %{_libexecdir}/lustre/haconfig
%attr(-, root, root) %{_sysconfdir}/ha.d/resource.d/Lustre.ha_v2
%attr(-, root, root) %{_sysconfdir}/ha.d/resource.d/Lustre
EOF

if [ -f $RPM_BUILD_ROOT%{_libdir}/libcfsutil.a ] ; then
  echo '%attr(-, root, root) %{_libdir}/libcfsutil.a' >>lustre.files
fi

if [ -f $RPM_BUILD_ROOT%{_libdir}/liblustre.so ] ; then
  echo '%attr(-, root, root) %{_libdir}/liblustre.a' >>lustre.files
  echo '%attr(-, root, root) %{_libdir}/liblustre.so' >>lustre.files
fi

if [ -f $RPM_BUILD_ROOT%{_libdir}/libiam.a ] ; then
  echo '%attr(-, root, root) %{_libdir}/libiam.a' >>lustre.files
fi

if [ -d $RPM_BUILD_ROOT%{_libdir}/lustre/snmp ] ; then
  echo '%attr(-, root, root) %{_libdir}/lustre/snmp' >>lustre.files
  echo '%attr(-, root, root) %{_datadir}/lustre/snmp/mibs' >>lustre.files
fi

# Have universal lustre headers
if [ -f $RPM_BUILD_DIR/lustre-%{version}/lustre/include/lustre/lustre_idl.h ] ; then
  echo '%attr(-, root, root) %{_includedir}/linux/lustre_user.h' >>lustre.files
else
  echo '%attr(-, root, root) %{_includedir}/linux/lustre_idl.h' >>lustre.files
fi

if [ -f $RPM_BUILD_DIR/lustre-%{version}/lustre/include/linux/lustre_types.h ] ; then
  echo '%attr(-, root, root) %{_includedir}/linux/lustre_types.h' >>lustre.files
fi

%if %{with lustre_tests}
echo '%attr(-, root, root) %{_libdir}/lustre/tests/*' >lustre-tests.files
echo '%attr(-, root, root) %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/llog_test.*' >>lustre-tests.files
if [ -d $RPM_BUILD_ROOT%{_libdir}/lustre/liblustre/tests ] ; then
  echo '%attr(-, root, root) %{_libdir}/lustre/liblustre/tests/*' >>lustre-tests.files
fi
%endif

%if %{defined cross_path}
%if %{defined rpm_post_base}
POST_SCRIPT=$RPM_BUILD_DIR/lustre-%{version}/%{post_script}
if [ -f $POST_SCRIPT ]; then
	cp -f $POST_SCRIPT $RPM_BUILD_ROOT/%{rpm_post_base}.sh
	echo '%attr(0555, root, root) %{rpm_post_base}.sh' >>lustre.files
	cp -f $POST_SCRIPT $RPM_BUILD_ROOT/%{rpm_post_base}-modules.sh
%if %{with ldiskfs}
	cp -f $POST_SCRIPT $RPM_BUILD_ROOT/%{rpm_post_base}-osd-ldiskfs.sh
%endif
%if %{with zfs}
	cp -f $POST_SCRIPT $RPM_BUILD_ROOT/%{rpm_post_base}-osd-zfs.sh
%endif
%if %{with lustre_tests}
	cp -f $POST_SCRIPT $RPM_BUILD_ROOT/%{rpm_post_base}-tests.sh
	echo '%attr(0555, root, root) %{rpm_post_base}-tests.sh' >>lustre-tests.files
%endif
fi
%endif
%else
# mark modules executable for find-debuginfo.sh
find $RPM_BUILD_ROOT%{?rootdir}/lib/modules/%{kver}/updates -name "*.ko" -type f | \
	xargs --no-run-if-empty chmod u+x
%endif

%files -f lustre.files

%files modules
%attr(-, root, root) %{?rootdir}/lib/modules/%{kver}/updates/*
%if %{with lustre_tests}
%exclude %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/llog_test.ko
%endif
%if %{with ldiskfs}
%exclude %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/fsfilt_ldiskfs.ko
%exclude %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/osd_ldiskfs.ko
%endif
%if %{with zfs}
%exclude %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/osd_zfs.ko
%endif
%if %{defined rpm_post_base}
%attr(0555, root, root) %{rpm_post_base}-modules.sh
%endif
%attr(-, root, root) %doc COPYING
%attr(-, root, root) %doc ChangeLog-lustre
%attr(-, root, root) %doc ChangeLog-lnet

%if %{with ldiskfs}
%files osd-ldiskfs
%attr(-, root, root) %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/fsfilt_ldiskfs.ko
%attr(-, root, root) %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/osd_ldiskfs.ko
%if %{defined rpm_post_base}
%attr(0555, root, root) %{rpm_post_base}-osd-ldiskfs.sh
%endif
%endif

%if %{with zfs}
%files osd-zfs
%attr(-, root, root) %{?rootdir}/lib/modules/%{kver}/updates/kernel/fs/lustre/osd_zfs.ko
%if %{defined rpm_post_base}
%attr(0555, root, root) %{rpm_post_base}-osd-zfs.sh
%endif
%endif

%files source
%attr(-, root, root) %{_prefix}/src/lustre-%{version}

# uncomment these lines to enable deps packages
# %files deps-sles
# %files deps-rhel

%if %{with lustre_tests}
%files tests -f lustre-tests.files
%endif

%if %{defined rpm_post_base}
%post
if [ -x %{rpm_post_base}.sh ]; then
	%{rpm_post_base}.sh %{cross_path} create
fi

%preun
if [ -x %{rpm_post_base}.sh ]; then
	%{rpm_post_base}.sh %{cross_path} remove
fi
%endif

%post modules
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-modules.sh ]; then
	%{rpm_post_base}-modules.sh %{cross_path} create
fi
%else
if [ -f /boot/System.map-%{kver} ]; then
	depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
	depmod -ae %{kver} || exit 0
fi

MODULES_RPM_NAME=$(rpm -q %{lustre_name}-modules | grep "%{version}-%{release}")
# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    rpm -ql $MODULES_RPM_NAME | grep '\.ko$' |
        /usr/lib/module-init-tools/weak-modules --add-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    rpm -ql $MODULES_RPM_NAME | grep '\.ko$' |
        /sbin/weak-modules --add-modules
fi

# If the kernel was built to reject unsupported modules (e.g. not a Lustre
# kernel), and this hasn't been overridden in /etc/modprobe.d yet, then
# print a warning so that users are aware of this issue.
if sysctl kernel.unsupported >/dev/null 2>&1 &&
   [ "$(sysctl -n kernel.unsupported 2>/dev/null)" = "0" ] &&
    ! modprobe -c | grep -q "^allow_unsupported_modules[ \t]1" ; then
     echo "
     warning: the Lustre modules are not supported by Novell. To use Lustre
              on this system, you should put

     allow_unsupported_modules 1

     into /etc/modprobe.d/unsupported_modules"
fi
%endif

%if %{with ldiskfs}
%post osd-ldiskfs
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-osd-ldiskfs.sh ]; then
	%{rpm_post_base}-osd-ldiskfs.sh %{cross_path} create
fi
%else
if [ -f /boot/System.map-%{kver} ]; then
       depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
       depmod -ae %{kver} || exit 0
fi

OSD_LDISKFS_RPM_NAME=$(rpm -q %{lustre_name}-osd-ldiskfs | grep "%{version}-%{release}")
# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    rpm -ql $OSD_LDISKFS_RPM_NAME | grep '\.ko$' |
        /usr/lib/module-init-tools/weak-modules --add-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    rpm -ql $OSD_LDISKFS_RPM_NAME | grep '\.ko$' |
        /sbin/weak-modules --add-modules
fi

# If the kernel was built to reject unsupported modules (e.g. not a Lustre
# kernel), and this hasn't been overridden in /etc/modprobe.d yet, then
# print a warning so that users are aware of this issue.
if sysctl kernel.unsupported >/dev/null 2>&1 &&
   [ "$(sysctl -n kernel.unsupported 2>/dev/null)" = "0" ] &&
    ! modprobe -c | grep -q "^allow_unsupported_modules[ \t]1" ; then
     echo "
     warning: the Lustre modules are not supported by Novell. To use Lustre
              on this system, you should put

     allow_unsupported_modules 1

     into /etc/modprobe.d/unsupported_modules"
fi
%endif
%endif

%if %{with zfs}
%post osd-zfs
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-osd-zfs.sh ]; then
	%{rpm_post_base}-osd-zfs.sh %{cross_path} create
fi
%else
if [ -f /boot/System.map-%{kver} ]; then
       depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
       depmod -ae %{kver} || exit 0
fi

OSD_ZFS_RPM_NAME=$(rpm -q %{lustre_name}-osd-zfs | grep "%{version}-%{release}")
# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    rpm -ql $OSD_ZFS_RPM_NAME | grep '\.ko$' |
        /usr/lib/module-init-tools/weak-modules --add-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    rpm -ql $OSD_ZFS_RPM_NAME | grep '\.ko$' |
        /sbin/weak-modules --add-modules
fi

# If the kernel was built to reject unsupported modules (e.g. not a Lustre
# kernel), and this hasn't been overridden in /etc/modprobe.d yet, then
# print a warning so that users are aware of this issue.
if sysctl kernel.unsupported >/dev/null 2>&1 &&
   [ "$(sysctl -n kernel.unsupported 2>/dev/null)" = "0" ] &&
    ! modprobe -c | grep -q "^allow_unsupported_modules[ \t]1" ; then
     echo "
     warning: the Lustre modules are not supported by Novell. To use Lustre
              on this system, you should put

     allow_unsupported_modules 1

     into /etc/modprobe.d/unsupported_modules"
fi
%endif
%endif

%preun modules
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-modules.sh ]; then
	%{rpm_post_base}-modules.sh %{cross_path} remove
fi
%else
MODULES_RPM_NAME=$(rpm -q %{lustre_name}-modules | grep "%{version}-%{release}")
rpm -ql $MODULES_RPM_NAME | grep '\.ko$' > /var/run/%{lustre_name}-modules || true
%endif

%if %{with ldiskfs}
%preun osd-ldiskfs
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-osd-ldiskfs.sh ]; then
	%{rpm_post_base}-osd-ldiskfs.sh %{cross_path} remove
fi
%else
OSD_LDISKFS_RPM_NAME=$(rpm -q %{lustre_name}-osd-ldiskfs | grep "%{version}-%{release}")
rpm -ql $OSD_LDISKFS_RPM_NAME | grep '\.ko$' > /var/run/%{lustre_name}-osd-ldiskfs || true
%endif
%endif

%if %{with zfs}
%preun osd-zfs
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-osd-zfs.sh ]; then
	%{rpm_post_base}-osd-zfs.sh %{cross_path} remove
fi
%else
OSD_ZFS_RPM_NAME=$(rpm -q %{lustre_name}-osd-zfs | grep "%{version}-%{release}")
rpm -ql $OSD_ZFS_RPM_NAME | grep '\.ko$' > /var/run/%{lustre_name}-osd-zfs || true
%endif
%endif

%if %{undefined cross_path}
%postun modules
if [ -f /boot/System.map-%{kver} ]; then
	depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
	depmod -ae %{kver} || exit 0
fi

# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    cat /var/run/%{lustre_name}-modules |
        /usr/lib/module-init-tools/weak-modules --remove-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    cat /var/run/%{lustre_name}-modules |
        /sbin/weak-modules --remove-modules
fi
rm /var/run/%{lustre_name}-modules

%if %{with ldiskfs}
%postun osd-ldiskfs
if [ -f /boot/System.map-%{kver} ]; then
       depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
       depmod -ae %{kver} || exit 0
fi

# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    cat /var/run/%{lustre_name}-osd-ldiskfs |
        /usr/lib/module-init-tools/weak-modules --remove-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    cat /var/run/%{lustre_name}-osd-ldiskfs |
        /sbin/weak-modules --remove-modules
fi
rm /var/run/%{lustre_name}-osd-ldiskfs
%endif

%if %{with zfs}
%postun osd-zfs
if [ -f /boot/System.map-%{kver} ]; then
       depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
       depmod -ae %{kver} || exit 0
fi

# "weak modules" support
# Suse
if [ -x /usr/lib/module-init-tools/weak-modules ]; then
    cat /var/run/%{lustre_name}-osd-zfs |
        /usr/lib/module-init-tools/weak-modules --remove-modules
fi
# RedHat
if [ -x /sbin/weak-modules ]; then
    cat /var/run/%{lustre_name}-osd-zfs |
        /sbin/weak-modules --remove-modules
fi
rm /var/run/%{lustre_name}-osd-zfs
%endif
%endif

%if %{with lustre_tests}
%post tests
%if %{defined rpm_post_base}
if [ -x %{rpm_post_base}-tests.sh ]; then
	%{rpm_post_base}-tests.sh %{cross_path} create
fi

%preun tests
if [ -x %{rpm_post_base}-tests.sh ]; then
	%{rpm_post_base}-tests.sh %{cross_path} remove
fi
%else
if [ -f /boot/System.map-%{kver} ]; then
	depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
	depmod -ae %{kver} || exit 0
fi

%postun tests
if [ -f /boot/System.map-%{kver} ]; then
	depmod -ae -F /boot/System.map-%{kver} %{kver} || exit 0
else
	depmod -ae %{kver} || exit 0
fi
%endif
%endif

%clean
rm -rf $RPM_BUILD_ROOT
